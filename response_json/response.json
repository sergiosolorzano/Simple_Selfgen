{"module": "import operator\nimport unittest\n\ndef add(x, y):\n    '''Return the sum of two numbers.\n    Parameters:\n    x (int/float): The first number to be added.\n    y (int/float): The second number to be added.\n    Return Value:\n    The sum of x and y (int/float).\n    '''\n    return operator.add(x, y)\n\ndef subtract(x, y):\n    '''Return the difference of two numbers.\n    Parameters:\n    x (int/float): The number to be subtracted from.\n    y (int/float): The number to subtract.\n    Return Value:\n    The difference of x and y (int/float).\n    '''\n    return operator.sub(x, y)\n\ndef multiply(x, y):\n    '''Return the product of two numbers.\n    Parameters:\n    x (int/float): The first number to be multiplied.\n    y (int/float): The second number to be multiplied.\n    Return Value:\n    The product of x and y (int/float).\n    '''\n    return operator.mul(x, y)\n\ndef divide(x, y):\n    '''Return the quotient of two numbers.\n    Parameters:\n    x (int/float): The numerator.\n    y (int/float): The denominator.\n    Return Value:\n    If y is not 0, the quotient of x and y (float).\n    If y is 0, an error message (str).\n    '''\n    try:\n        return operator.truediv(x, y)\n    except ZeroDivisionError:\n        return 'Error: division by zero'\n\ndef program(operation, x, y):\n    '''Perform an arithmetic operation on two numbers.\n    Parameters:\n    operation (str): The arithmetic operation to perform.\n    x (int/float): The first operand.\n    y (int/float): The second operand.\n    Return Value:\n    The result of the arithmetic operation (int/float/str).\n    Exceptions:\n    ValueError: If the operation is not one of the following: 'add', 'subtract', 'multiply', 'divide'.\n    '''\n    if operation == 'add':\n        return add(x, y)\n    elif operation == 'subtract':\n        return subtract(x, y)\n    elif operation == 'multiply':\n        return multiply(x, y)\n    elif operation == 'divide':\n        return divide(x, y)\n    else:\n        raise ValueError('Invalid operation: {}'.format(operation))\n\nclass TestProgram(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(0, 0), 0)\n        self.assertEqual(add(-2, 3), 1)\n        self.assertEqual(add(2.5, 3.5), 6)\n        self.assertEqual(add(-2.5, -3.5), -6)\n\n    def test_subtract(self):\n        self.assertEqual(subtract(2, 3), -1)\n        self.assertEqual(subtract(0, 0), 0)\n        self.assertEqual(subtract(-2, 3), -5)\n        self.assertEqual(subtract(2.5, 3.5), -1)\n        self.assertEqual(subtract(-2.5, -3.5), 1)\n\n    def test_multiply(self):\n        self.assertEqual(multiply(2, 3), 6)\n        self.assertEqual(multiply(0, 0), 0)\n        self.assertEqual(multiply(-2, 3), -6)\n        self.assertEqual(multiply(2.5, 3.5), 8.75)\n        self.assertEqual(multiply(-2.5, -3.5), 8.75)\n\n    def test_divide(self):\n        self.assertEqual(divide(2, 3), 2/3)\n        self.assertEqual(divide(0, 2), 0)\n        self.assertEqual(divide(-2, 3), -2/3)\n        self.assertEqual(divide(2.5, 5), 0.5)\n        self.assertEqual(divide(-2.5, -5), 0.5)\n        self.assertEqual(divide(2, 0), 'Error: division by zero')\n\n    def test_program_add(self):\n        self.assertEqual(program('add', 2, 3), 5)\n\n    def test_program_subtract(self):\n        self.assertEqual(program('subtract', 2, 3), -1)\n\n    def test_program_multiply(self):\n        self.assertEqual(program('multiply', 2, 3), 6)\n\n    def test_program_divide(self):\n        self.assertEqual(program('divide', 2, 3), 2/3)\n        self.assertEqual(program('divide', 2, 0), 'Error: division by zero')\n\nif __name__ == '__main__':\n    unittest.main()", "unittest_cli_1": "python -m unittest module.TestProgram.test_add", "unittest_cli_2": "python -m unittest module.TestProgram.test_subtract", "unittest_cli_3": "python -m unittest module.TestProgram.test_multiply", "unittest_cli_4": "python -m unittest module.TestProgram.test_divide", "unittest_cli_5": "python -m unittest module.TestProgram.test_program_add", "unittest_cli_6": "python -m unittest module.TestProgram.test_program_subtract", "unittest_cli_7": "python -m unittest module.TestProgram.test_program_multiply", "unittest_cli_8": "python -m unittest module.TestProgram.test_program_divide"}