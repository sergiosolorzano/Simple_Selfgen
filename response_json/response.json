{"module": "import sys\nimport argparse\nimport unittest\n\ndef sum(num1, num2):\n    return num1 + num2\n\ndef subtract(num1, num2):\n    return num1 - num2\n\ndef multiply(num1, num2):\n    return num1 * num2\n\ndef divide(num1, num2):\n    if num2 == 0:\n        print('Cannot divide by zero')\n        sys.exit()\n    else:\n        return num1 / num2\n\ndef program(num1, num2, operation):\n    if operation == 'sum':\n        result = sum(num1, num2)\n    elif operation == 'subtract':\n        result = subtract(num1, num2)\n    elif operation == 'multiply':\n        result = multiply(num1, num2)\n    elif operation == 'divide':\n        result = divide(num1, num2)\n    else:\n        print('Invalid operation')\n        sys.exit()\n    return result\n\nclass TestCalculator(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(sum(1, 2), 3)\n        self.assertEqual(sum(0, 0), 0)\n        self.assertEqual(sum(-1, 1), 0)\n    def test_subtract(self):\n        self.assertEqual(subtract(1, 2), -1)\n        self.assertEqual(subtract(0, 0), 0)\n        self.assertEqual(subtract(-1, 1), -2)\n    def test_multiply(self):\n        self.assertEqual(multiply(1, 2), 2)\n        self.assertEqual(multiply(0, 0), 0)\n        self.assertEqual(multiply(-1, 1), -1)\n    def test_divide(self):\n        self.assertEqual(divide(1, 2), 0.5)\n        self.assertEqual(divide(0, 1), 0)\n        self.assertRaises(SystemExit, divide, 1, 0)\n\ndef unittest_cli_1():\n    unittest.main(argv=[''], exit=False)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='A calculator that performs arithmetic operations on two numbers')\n    parser.add_argument('num1', metavar='Num 1', type=float, help='Enter the first number')\n    parser.add_argument('num2', metavar='Num 2', type=float, help='Enter the second number')\n    parser.add_argument('operation', metavar='Operation', choices=['sum', 'subtract', 'multiply', 'divide'], help='Enter the arithmetic operation to perform (sum, subtract, multiply, or divide)')\n    args = parser.parse_args()\n    num1 = args.num1\n    num2 = args.num2\n    operation = args.operation\n    result = program(num1, num2, operation)\n    print(result)\n", "unittest_cli_1": "python module.py -v"}