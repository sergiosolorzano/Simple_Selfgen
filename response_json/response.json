{"module": "import argparse\nimport sys\nimport unittest\n\ndef sum(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        print('Error: division by zero')\n        sys.exit()\ndef program(num1, num2, operation):\n    a = num1\n    b = num2\n    if operation == 'sum':\n        result = sum(a, b)\n    elif operation == 'subtract':\n        result = subtract(a, b)\n    elif operation == 'multiply':\n        result = multiply(a, b)\n    elif operation == 'divide':\n        result = divide(a, b)\n    return result\n\nclass TestProgram(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(sum(2, 3), 5)\n    def test_subtract(self):\n        self.assertEqual(subtract(5, 3), 2)\n    def test_multiply(self):\n        self.assertEqual(multiply(2, 3), 6)\n    def test_divide(self):\n        self.assertEqual(divide(6, 3), 2)\n        with self.assertRaises(ZeroDivisionError):\n            divide(6, 0)\n    def test_program_sum(self):\n        self.assertEqual(program(2, 3, 'sum'), 5)\n    def test_program_subtract(self):\n        self.assertEqual(program(5, 3, 'subtract'), 2)\n    def test_program_multiply(self):\n        self.assertEqual(program(2, 3, 'multiply'), 6)\n    def test_program_divide(self):\n        self.assertEqual(program(6, 3, 'divide'), 2)\n        with self.assertRaises(ZeroDivisionError):\n            program(6, 0, 'divide')\n\nif __name__ == '__main__':\n    unittest.main()", "unittest_cli_1": "python -m unittest module.TestProgram.test_sum", "unittest_cli_2": "python -m unittest module.TestProgram.test_subtract", "unittest_cli_3": "python -m unittest module.TestProgram.test_multiply", "unittest_cli_4": "python -m unittest module.TestProgram.test_divide", "unittest_cli_5": "python -m unittest module.TestProgram.test_program_sum", "unittest_cli_6": "python -m unittest module.TestProgram.test_program_subtract", "unittest_cli_7": "python -m unittest module.TestProgram.test_program_multiply", "unittest_cli_8": "python -m unittest module.TestProgram.test_program_divide"}